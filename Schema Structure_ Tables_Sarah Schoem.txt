-- Table Creation of Database
-- Author: Sarah (Dahms) Schoem
-- Course: DBST651, Spring 2024



-- Tables
CREATE TABLE STUDENT (
    STUDENT_ID NUMBER(8) PRIMARY KEY,
    FIRST_NAME VARCHAR2(25),
    LAST_NAME VARCHAR2(25),
    ADDRESS VARCHAR2(100),
    EMPLOYER VARCHAR2(50),
    REGISTRATION_DATE DATE,
    ZIP NUMBER(5) NOT NULL,
    FOREIGN KEY (ZIP) REFERENCES ZIPCODE(ZIP)
);

CREATE TABLE COURSE (
    COURSE_NO NUMBER(8) PRIMARY KEY,
    DESCRIPTION VARCHAR2(50),
    COST NUMBER(9,2),
    PREREQUISITE NUMBER(8),
    CREATED_BY VARCHAR2(30),
    CREATED_DATE DATE DEFAULT SYSDATE,
    MODIFIED_BY VARCHAR2(30),
    MODIFIED_DATE DATE,
    CONSTRAINT COURSE_COST_CHK CHECK (COST >= 0),
    CONSTRAINT COURSE_MODIFIED_DATE_CHK CHECK (MODIFIED_DATE >= CREATED_DATE),
    FOREIGN KEY (PREREQUISITE) REFERENCES COURSE(COURSE_NO)
);

CREATE TABLE SECTION (
    SECTION_ID NUMBER(8) PRIMARY KEY,
    COURSE_NO NUMBER(8),
    SECTION_NO NUMBER(3),
    START_DATE_TIME TIMESTAMP,
    LOCATION VARCHAR2(50),
    INSTRUCTOR_ID NUMBER(8),
    CAPACITY NUMBER(3),
    CREATED_BY VARCHAR2(30),
    CREATED_DATE DATE DEFAULT SYSDATE,
    MODIFIED_BY VARCHAR2(30),
    MODIFIED_DATE DATE,
    UNIQUE (SECTION_NO, COURSE_NO),
    FOREIGN KEY (COURSE_NO) REFERENCES COURSE(COURSE_NO),
    FOREIGN KEY (INSTRUCTOR_ID) REFERENCES INSTRUCTOR(INSTRUCTOR_ID)
);

CREATE TABLE INSTRUCTOR (
    INSTRUCTOR_ID NUMBER(8) PRIMARY KEY,
    FIRST_NAME VARCHAR2(25),
    LAST_NAME VARCHAR2(25),
    ADDRESS VARCHAR2(100),
    PHONE VARCHAR2(15),
    ZIP NUMBER(5),
    CONSTRAINT INSTRUCTOR_PHONE_CHK CHECK (LENGTH(PHONE) >= 7),
    FOREIGN KEY (ZIP) REFERENCES ZIPCODE(ZIP)
);

CREATE TABLE ZIPCODE (
    ZIP NUMBER(5) PRIMARY KEY,
    CITY VARCHAR2(50),
    STATE VARCHAR2(50)
);

CREATE TABLE ENROLLMENT (
    STUDENT_ID NUMBER(8),
    SECTION_ID NUMBER(8),
    ENROLL_DATE DATE DEFAULT SYSDATE,
    FINAL_GRADE VARCHAR2(2),
    PRIMARY KEY (STUDENT_ID, SECTION_ID),
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(STUDENT_ID),
    FOREIGN KEY (SECTION_ID) REFERENCES SECTION(SECTION_ID)
);

CREATE TABLE GRADE_TYPE (
    GRADE_TYPE_CODE CHAR(2) PRIMARY KEY,
    DESCRIPTION VARCHAR2(50)
);

CREATE TABLE GRADE (
    STUDENT_ID NUMBER(8),
    SECTION_ID NUMBER(8),
    GRADE_TYPE_CODE CHAR(2),
    GRADE_CODE_OCCURRENCE NUMBER(38),
    NUMERIC_GRADE NUMBER(3),
    COMMENTS VARCHAR2(2000),
    CREATED_BY VARCHAR2(30),
    CREATED_DATE DATE DEFAULT SYSDATE,
    MODIFIED_BY VARCHAR2(30),
    MODIFIED_DATE DATE,
    PRIMARY KEY (STUDENT_ID, SECTION_ID, GRADE_TYPE_CODE, GRADE_CODE_OCCURRENCE),
    FOREIGN KEY (STUDENT_ID, SECTION_ID) REFERENCES ENROLLMENT(STUDENT_ID, SECTION_ID),
    FOREIGN KEY (GRADE_TYPE_CODE) REFERENCES GRADE_TYPE(GRADE_TYPE_CODE)
);

-- Indexes
CREATE INDEX IDX_STUDENT_LAST_NAME ON STUDENT(LAST_NAME);
CREATE INDEX IDX_SECTION_START_DATE ON SECTION(START_DATE_TIME);

-- Triggers
CREATE OR REPLACE TRIGGER TRG_STUDENT_BEFORE_INSERT
BEFORE INSERT ON STUDENT
FOR EACH ROW
BEGIN
    :NEW.REGISTRATION_DATE := SYSDATE;
END;
/
